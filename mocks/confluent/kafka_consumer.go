// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.zgtools.net/devex/archetypes/gomods/zstreams/v4 (interfaces: KafkaConsumer)

// Package mock_confluent is a generated GoMock package.
package mock_confluent

import (
	reflect "reflect"
	time "time"

	kafka "github.com/confluentinc/confluent-kafka-go/v2/kafka"
	gomock "github.com/golang/mock/gomock"
)

// MockKafkaConsumer is a mock of KafkaConsumer interface.
type MockKafkaConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaConsumerMockRecorder
}

// MockKafkaConsumerMockRecorder is the mock recorder for MockKafkaConsumer.
type MockKafkaConsumerMockRecorder struct {
	mock *MockKafkaConsumer
}

// NewMockKafkaConsumer creates a new mock instance.
func NewMockKafkaConsumer(ctrl *gomock.Controller) *MockKafkaConsumer {
	mock := &MockKafkaConsumer{ctrl: ctrl}
	mock.recorder = &MockKafkaConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaConsumer) EXPECT() *MockKafkaConsumerMockRecorder {
	return m.recorder
}

// Assignment mocks base method.
func (m *MockKafkaConsumer) Assignment() ([]kafka.TopicPartition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assignment")
	ret0, _ := ret[0].([]kafka.TopicPartition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Assignment indicates an expected call of Assignment.
func (mr *MockKafkaConsumerMockRecorder) Assignment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assignment", reflect.TypeOf((*MockKafkaConsumer)(nil).Assignment))
}

// AssignmentLost mocks base method.
func (m *MockKafkaConsumer) AssignmentLost() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignmentLost")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AssignmentLost indicates an expected call of AssignmentLost.
func (mr *MockKafkaConsumerMockRecorder) AssignmentLost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignmentLost", reflect.TypeOf((*MockKafkaConsumer)(nil).AssignmentLost))
}

// Close mocks base method.
func (m *MockKafkaConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKafkaConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaConsumer)(nil).Close))
}

// Commit mocks base method.
func (m *MockKafkaConsumer) Commit() ([]kafka.TopicPartition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].([]kafka.TopicPartition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockKafkaConsumerMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockKafkaConsumer)(nil).Commit))
}

// ReadMessage mocks base method.
func (m *MockKafkaConsumer) ReadMessage(arg0 time.Duration) (*kafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", arg0)
	ret0, _ := ret[0].(*kafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockKafkaConsumerMockRecorder) ReadMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockKafkaConsumer)(nil).ReadMessage), arg0)
}

// StoreOffsets mocks base method.
func (m *MockKafkaConsumer) StoreOffsets(arg0 []kafka.TopicPartition) ([]kafka.TopicPartition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOffsets", arg0)
	ret0, _ := ret[0].([]kafka.TopicPartition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreOffsets indicates an expected call of StoreOffsets.
func (mr *MockKafkaConsumerMockRecorder) StoreOffsets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOffsets", reflect.TypeOf((*MockKafkaConsumer)(nil).StoreOffsets), arg0)
}

// SubscribeTopics mocks base method.
func (m *MockKafkaConsumer) SubscribeTopics(arg0 []string, arg1 kafka.RebalanceCb) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTopics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeTopics indicates an expected call of SubscribeTopics.
func (mr *MockKafkaConsumerMockRecorder) SubscribeTopics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTopics", reflect.TypeOf((*MockKafkaConsumer)(nil).SubscribeTopics), arg0, arg1)
}
