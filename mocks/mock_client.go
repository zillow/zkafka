// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock_zkafka is a generated GoMock package.
package mock_zkafka

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zkafka "github.com/zillow/zkafka"
)

// MockClientProvider is a mock of ClientProvider interface.
type MockClientProvider struct {
	ctrl     *gomock.Controller
	recorder *MockClientProviderMockRecorder
}

// MockClientProviderMockRecorder is the mock recorder for MockClientProvider.
type MockClientProviderMockRecorder struct {
	mock *MockClientProvider
}

// NewMockClientProvider creates a new mock instance.
func NewMockClientProvider(ctrl *gomock.Controller) *MockClientProvider {
	mock := &MockClientProvider{ctrl: ctrl}
	mock.recorder = &MockClientProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientProvider) EXPECT() *MockClientProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClientProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientProvider)(nil).Close))
}

// Reader mocks base method.
func (m *MockClientProvider) Reader(ctx context.Context, topicConfig zkafka.ConsumerTopicConfig, opts ...zkafka.ReaderOption) (zkafka.Reader, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, topicConfig}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reader", varargs...)
	ret0, _ := ret[0].(zkafka.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reader indicates an expected call of Reader.
func (mr *MockClientProviderMockRecorder) Reader(ctx, topicConfig interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, topicConfig}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockClientProvider)(nil).Reader), varargs...)
}

// Writer mocks base method.
func (m *MockClientProvider) Writer(ctx context.Context, topicConfig zkafka.ProducerTopicConfig, opts ...zkafka.WriterOption) (zkafka.Writer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, topicConfig}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Writer", varargs...)
	ret0, _ := ret[0].(zkafka.Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Writer indicates an expected call of Writer.
func (mr *MockClientProviderMockRecorder) Writer(ctx, topicConfig interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, topicConfig}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writer", reflect.TypeOf((*MockClientProvider)(nil).Writer), varargs...)
}
