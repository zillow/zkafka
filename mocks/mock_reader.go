// Code generated by MockGen. DO NOT EDIT.
// Source: kreader.go
//
// Generated by this command:
//
//	mockgen -source=kreader.go -package mock_zkafka -mock_names reader=MockReader -destination=./mock_reader.go
//

// Package mock_zkafka is a generated GoMock package.
package mock_zkafka

import (
	context "context"
	reflect "reflect"

	zkafka "github.com/zillow/zkafka"
	gomock "go.uber.org/mock/gomock"
)

// MockReader is a mock of reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Assignments mocks base method.
func (m *MockReader) Assignments(arg0 context.Context) ([]zkafka.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assignments", arg0)
	ret0, _ := ret[0].([]zkafka.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Assignments indicates an expected call of Assignments.
func (mr *MockReaderMockRecorder) Assignments(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assignments", reflect.TypeOf((*MockReader)(nil).Assignments), arg0)
}

// Close mocks base method.
func (m *MockReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReader)(nil).Close))
}

// Read mocks base method.
func (m *MockReader) Read(ctx context.Context) (*zkafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].(*zkafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReaderMockRecorder) Read(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReader)(nil).Read), ctx)
}
