// Code generated by avrogen. DO NOT EDIT.

package avro1

import (
	"fmt"
	"github.com/heetch/avro/avrotypegen"
	"strconv"
)

type AddressRecord struct {
	Streetnumber    string  `json:"streetNumber"`
	Streetname      string  `json:"streetName"`
	Unitnumber      *string `json:"unitNumber"`
	Postalcode      string  `json:"postalCode"`
	City            string  `json:"city"`
	Stateorprovince string  `json:"stateOrProvince"`
	Country         string  `json:"country"`
	Latitude        float32 `json:"latitude"`
	Longitude       float32 `json:"longitude"`
}

// AvroRecord implements the avro.AvroRecord interface.
func (AddressRecord) AvroRecord() avrotypegen.RecordInfo {
	return avrotypegen.RecordInfo{
		Schema: `{"fields":[{"name":"streetNumber","type":"string"},{"name":"streetName","type":"string"},{"default":null,"name":"unitNumber","type":["null","string"]},{"name":"postalCode","type":"string"},{"name":"city","type":"string"},{"name":"stateOrProvince","type":"string"},{"name":"country","type":"string"},{"name":"latitude","type":"float"},{"name":"longitude","type":"float"}],"name":"com.zillowgroup.rmx.pem_schema.AddressRecord","type":"record"}`,
		Required: []bool{
			0: true,
			1: true,
			3: true,
			4: true,
			5: true,
			6: true,
			7: true,
			8: true,
		},
	}
}

type AryeoFloorplanRecord struct {
	Url string `json:"url"`

	// Id(uuid v7) of the underlying Aryeo Floorplan Record
	Id string `json:"id"`
}

// AvroRecord implements the avro.AvroRecord interface.
func (AryeoFloorplanRecord) AvroRecord() avrotypegen.RecordInfo {
	return avrotypegen.RecordInfo{
		Schema: `{"fields":[{"name":"url","type":"string"},{"doc":"Id(uuid v7) of the underlying Aryeo Floorplan Record","name":"id","type":"string"}],"name":"com.zillowgroup.rmx.pem_schema.AryeoFloorplanRecord","type":"record"}`,
		Required: []bool{
			0: true,
			1: true,
		},
	}
}

type AryeoListingEventType int

const (
	AryeoListingEventTypeListingcreated AryeoListingEventType = iota
	AryeoListingEventTypeListingassociated
	AryeoListingEventTypeListingmedidelivered
)

var _AryeoListingEventType_strings = []string{
	"listingCreated",
	"listingAssociated",
	"listingMediDelivered",
}

// String returns the textual representation of AryeoListingEventType.
func (e AryeoListingEventType) String() string {
	if e < 0 || int(e) >= len(_AryeoListingEventType_strings) {
		return "AryeoListingEventType(" + strconv.FormatInt(int64(e), 10) + ")"
	}
	return _AryeoListingEventType_strings[e]
}

// MarshalText implements encoding.TextMarshaler
// by returning the textual representation of AryeoListingEventType.
func (e AryeoListingEventType) MarshalText() ([]byte, error) {
	if e < 0 || int(e) >= len(_AryeoListingEventType_strings) {
		return nil, fmt.Errorf("AryeoListingEventType value %d is out of bounds", e)
	}
	return []byte(_AryeoListingEventType_strings[e]), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
// by expecting the textual representation of AryeoListingEventType.
func (e *AryeoListingEventType) UnmarshalText(data []byte) error {
	// Note for future: this could be more efficient.
	for i, s := range _AryeoListingEventType_strings {
		if string(data) == s {
			*e = AryeoListingEventType(i)
			return nil
		}
	}
	return fmt.Errorf("unknown value %q for AryeoListingEventType", data)
}

type AryeoListingRecord struct {
	// Id(uuid v7) of the underlying Aryeo Listing
	Id string `json:"id"`

	// Id(uuid v7) of Aryeo Listing's underlying Company
	Companyid string `json:"companyId"`

	// Timestamp depicting when Aryeo's listing was delivered
	Deliveredatdatetimeutc int64 `json:"deliveredAtDateTimeUtc"`

	// Enum depicting type of event
	Eventtype AryeoListingEventType `json:"eventType"`

	// Unique identifier of Showcase Engagement associated to underlying Aryeo Listing
	Engagementid *string `json:"engagementId"`

	// Address associated to Aryeo Listing
	Address AddressRecord `json:"address"`

	// Photos delivered for underlying Aryeo Listing
	Images *[]ImageRecord `json:"images"`

	// Floorplans associated to Aryeo Listing
	Floorplans *[]AryeoFloorplanRecord `json:"floorplans"`
}

// AvroRecord implements the avro.AvroRecord interface.
func (AryeoListingRecord) AvroRecord() avrotypegen.RecordInfo {
	return avrotypegen.RecordInfo{
		Schema: `{"fields":[{"doc":"Id(uuid v7) of the underlying Aryeo Listing","name":"id","type":"string"},{"doc":"Id(uuid v7) of Aryeo Listing's underlying Company","name":"companyId","type":"string"},{"doc":"Timestamp depicting when Aryeo's listing was delivered","name":"deliveredAtDateTimeUtc","type":{"logicalType":"timestamp-millis","type":"long"}},{"doc":"Enum depicting type of event","name":"eventType","type":{"default":"listingCreated","name":"AryeoListingEventType","symbols":["listingCreated","listingAssociated","listingMediDelivered"],"type":"enum"}},{"default":null,"doc":"Unique identifier of Showcase Engagement associated to underlying Aryeo Listing","name":"engagementId","type":["null","string"]},{"doc":"Address associated to Aryeo Listing","name":"address","type":{"fields":[{"name":"streetNumber","type":"string"},{"name":"streetName","type":"string"},{"default":null,"name":"unitNumber","type":["null","string"]},{"name":"postalCode","type":"string"},{"name":"city","type":"string"},{"name":"stateOrProvince","type":"string"},{"name":"country","type":"string"},{"name":"latitude","type":"float"},{"name":"longitude","type":"float"}],"name":"AddressRecord","type":"record"}},{"default":null,"doc":"Photos delivered for underlying Aryeo Listing","name":"images","type":["null",{"items":{"fields":[{"name":"id","type":"string"},{"name":"index","type":"int"},{"default":null,"name":"caption","type":["null","string"]},{"default":null,"name":"url","type":["null","string"]}],"name":"ImageRecord","type":"record"},"type":"array"}]},{"default":null,"doc":"Floorplans associated to Aryeo Listing","name":"floorplans","type":["null",{"items":{"fields":[{"name":"url","type":"string"},{"doc":"Id(uuid v7) of the underlying Aryeo Floorplan Record","name":"id","type":"string"}],"name":"AryeoFloorplanRecord","type":"record"},"type":"array"}]}],"name":"com.zillowgroup.rmx.pem_schema.AryeoListingRecord","type":"record"}`,
		Required: []bool{
			0: true,
			1: true,
			2: true,
			3: true,
			5: true,
		},
	}
}

type ImageRecord struct {
	Id      string  `json:"id"`
	Index   int     `json:"index"`
	Caption *string `json:"caption"`
	Url     *string `json:"url"`
}

// AvroRecord implements the avro.AvroRecord interface.
func (ImageRecord) AvroRecord() avrotypegen.RecordInfo {
	return avrotypegen.RecordInfo{
		Schema: `{"fields":[{"name":"id","type":"string"},{"name":"index","type":"int"},{"default":null,"name":"caption","type":["null","string"]},{"default":null,"name":"url","type":["null","string"]}],"name":"com.zillowgroup.rmx.pem_schema.ImageRecord","type":"record"}`,
		Required: []bool{
			0: true,
			1: true,
		},
	}
}
